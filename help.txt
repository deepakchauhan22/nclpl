Notes: 

React Router ships with a few hooks that let you access the state of the router and perform navigation from inside your components.Please note: You need to be using React >= 16.8 in order to use any of these hooks!
useHistory
useLocation
useParams
useRouteMatch
useHistory
The useHistory hook gives you access to the history instance that you may use to navigate.


import { useHistory } from "react-router-dom";

function HomeButton() {
  let history = useHistory();

  function handleClick() {
    history.push("/home");
  }

  return (
    <button type="button" onClick={handleClick}>
      Go home
    </button>
  );
}

useLocation
The useLocation hook returns the location object that represents the current URL.
You can think about it like a useState that returns a new location whenever the URL changes.

import React from "react";
import ReactDOM from "react-dom";
import {
  BrowserRouter as Router,
  Switch,
  useLocation
} from "react-router-dom";

function usePageViews() {
  let location = useLocation();
  React.useEffect(() => {
    ga.send(["pageview", location.pathname]);
  }, [location]);
}

function App() {
  usePageViews();
  return <Switch>...</Switch>;
}

ReactDOM.render(
  <Router>
    <App />
  </Router>,
  node
);


useParams
useParams returns an object of key/value pairs of URL parameters. Use it to access match.params of the current <Route>.import React from "react";
import ReactDOM from "react-dom";
import {
  BrowserRouter as Router,
  Switch,
  Route,
  useParams
} from "react-router-dom";

function BlogPost() {
  let { slug } = useParams();
  return <div>Now showing post {slug}</div>;
}

ReactDOM.render(
  <Router>
    <Switch>
      <Route exact path="/">
        <HomePage />
      </Route>
      <Route path="/blog/:slug">
        <BlogPost />
      </Route>
    </Switch>
  </Router>,
  node
);

useRouteMatch
The useRouteMatch hook attempts to match the current URL in the same way that a <Route> would. It’s mostly useful for getting access to the match data without actually rendering a <Route>.Now, instead ofimport { Route } from "react-router-dom";

function BlogPost() {
  return (
    <Route
      path="/blog/:slug"
      render={({ match }) => {
        // Do whatever you want with the match...
        return <div />;
      }}
    />
  );
}
you can justimport { useRouteMatch } from "react-router-dom";

function BlogPost() {
  let match = useRouteMatch("/blog/:slug");

  // Do whatever you want with the match...
  return <div />;
}


<BrowserRouter>
A <Router> that uses the HTML5 history API (pushState, replaceState and the popstate event) to keep your UI in sync with the URL.

<HashRouter>
A <Router> that uses the hash portion of the URL (i.e. window.location.hash) to keep your UI in sync with the URL.IMPORTANT NOTE: Hash history does not support location.key or location.state. In previous versions we attempted to shim the behavior but there were edge-cases we couldn’t solve. Any code or plugin that needs this behavior won’t work. 
As this technique is only intended to support legacy browsers, we encourage you to configure your server to work with <BrowserHistory> instead


<NavLink>
A special version of the <Link> that will add styling attributes to the rendered element when it matches the current URL.

<Link>
Provides declarative, accessible navigation around your application.














 constructor(props) {
    super(props);
    this.state = {
      islogout: false
    };
  }
  signOut = (e) => {
    e.preventDefault();
    localStorage.removeItem("token");
    this.setState({
      islogout: true
      
    });
  };

  if (this.state.islogout) {
      return <Redirect to="/login" />;
    }



    <div class="row">
            <div class="col-md-6 grid-margin stretch-card">
              <div class="card tale-bg">
                <div class="card-people">
                  {/* <img src={hero} alt="people" class="img-fluid"/> */}
                  <div class="weather-info">

                  <div>
                 <div class="justify-content-end d-flex">
                  <div class="dropdown flex-md-grow-1 flex-xl-grow-0">
                    <button class="btn btn-sm btn-light bg-white dropdown-toggle" type="button" id="dropdownMenuDate2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                     <i class="mdi mdi-calendar"></i> Today (25 May 2021)
                    </button>
                  

   
                    <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuDate2">
                      <a class="dropdown-item" href="#">January - March</a>
                      <a class="dropdown-item" href="#">March - June</a>
                      <a class="dropdown-item" href="#">June - August</a>
                      <a class="dropdown-item" href="#">August - November</a>
                    </div>
                  </div>
                 </div>
                </div>
                    {/* <div class="d-flex weather-info1">
                      <div>
                        <h3 class="mb-0 font-weight-normal"><i class="icon-sun mr-2"></i>31<sup>&#176;</sup>c</h3>
                      </div>
                      <div class="ml-2">
                        <h4 class="location font-weight-normal">Ghaziabad</h4>
                        <h6 class="font-weight-normal">India</h6>
                      </div>
                    </div> */}
                  </div> 
                </div>
              </div>
            </div>